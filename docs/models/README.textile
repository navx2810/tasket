h1. Models

h2. Structure

The structure is pretty straight-forward. The app is a collection of entities which have a parent entity and content. Content can be either a "task":#task or a "project":#project. If the entity has a parent, it is linked to that parent and the parent becomes a "project":#project content type.

!./diagram.png(Diagram)!

h2. Entity

Entities are the base object for the task/project models. They contain the following information:

- Unique Identifier := an ID for the entity being created. 
- Description := the text summary of what this entity is. In the case of a task: this defines the task objectives. For a project, it could be a general description.
- Name := the name of the entity that shows up in the UI.
- List of Contributors := a list of user IDs who are operating with this entity.
- List of Comments := a list of comment IDs on this entity.
- Content := the content of this entity, either a "project":#project or a "task":#task.
- Parent := the ID of the parent entity this entity depends on.

bq. See "issue #5":https://github.com/navx2810/tasket/issues/5 for additional discussion on how Contributors might work.

h3. Content

Content is an interface that allows an "Entity":#entity to contain some type of data. The two data-types an entity can hold are: "Tasks":#task, and "Projects":#project. Content contain property getters and setters that the implementors will override to retrieve their information.

- CurrentProgress := is a getter for the current progress score of a task or project. A task can only be completed or not completed, but a project's current progress is made up of the sum of the CurrentProgress of it's entities.
- TotalProgress := the maximum progress score of a task or project. The max progress of a task is 1 _(since a task can only be completed or not completed, 1 or 0)_. The max progress of a project is the sum of all of it's entities MaxProgresses.
- Type := the type refers to which type the content is. It can either be *project* or *task*. This is used by the view and database as a type-safe way without casting to determine the data-type of the content.
- IsCompleted := this property is used to get or set whether an entity is marked a complete or not. For tasks, this simply sets it's local private boolean, but for projects, it recursively goes through each task or project in it's entities and sets their IsCompleted to the value.

h2. Task

A task is a job to be completed. It can either be completed or not.

*Overriden*

- IsCompleted := a variable for determining if the Task is considered complete or not.
- get CurrentProgress := returns *1* if *isCurrentlyCompleted* is true, otherwise returns *0*.
- get ProgressTotal := returns *1* since a task can only be completed or not, _(1 or 0)_.
- get Type := returns *TASK*.



h2. Project

A project is a collection of entities _(task or other projects)_ that depend on this entity as it's parent.

- Entities := a list of all the entities that depend on this entity as it's parent.

*Overriden*

- set IsCompleted(val) := recursively loops through entities and set's each entities *IsCompleted* to *val*.
- get IsCompleted := recursively loops through entities and checks to see if the entities *IsCompleted* is true. If it is, this returns *true*, otherwise, it returns *false*.
- get CurrentProgress := returns the summeration of each entities *CurrentProgress* value.
- get ProgressTotal := returns the summeration of each entities *ProgressTotal* value.
- get Type := returns *PROJECT*.

